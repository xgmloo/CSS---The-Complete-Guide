* {
    /* CSS 中的 box-sizing 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。

     box-sizing 属性可以被用来调整这些表现:
     content-box  是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，
                  并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。
     border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将
                  一个元素的width设为100px，那么这100px会包含它的border和padding，内容区的
                  实际宽度是width减去(border + padding)的值。大多数情况下，这使得我们更容易
                  地设定一个元素的宽高。 */
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    margin: 0;
    margin-top: 3.5rem;
}

main {
    min-height: calc(100vh - 3.5rem - 8rem);
}

.backdrop {
    position: fixed;
    /* positon: absolute; 若之前没有 position: relative; , 则表现和 fixed 一样 */
    display: none;
    top: 0;
    left: 0;
    z-index: 100;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
}

.main-header {
    width: 100%;
    background: #2ddf5c;
    padding: 0.5rem 1rem;
    position: fixed;
    z-index: 1;
    top: 0;
    left: 0;
}

.main-header>div {
    display: inline-block;
    /* CSS 的属性 vertical-align 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。 */
    vertical-align: middle;
}

.toggle-button {
    width: 3rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding-top: 0;
    padding-bottom: 0;
    vertical-align: middle;
}

.toggle-button:focus {
    outline: none;
}

.toggle-button__bar {
    width: 100%;
    height: 0.2rem;
    background: black;
    display: block;
    margin: 0.6rem 0;
}

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    height: 2.5rem;
    /* width: 20px; */
    display: inline-block;
    vertical-align: middle;
}

.main-header__brand img {
    height: 100%;
    /* width: 100%; */
}

.main-nav {
    display: none;
}

.main-nav__items {
    margin: 0;
    padding: 0;
    list-style: none;
}

.main-nav__item {
    display: inline-block;
    margin: 0 1rem;
}

.main-nav__item a,
.mobile-nav__item a {
    text-decoration: none;
    color: #0e4f1f;
    font-weight: bold;
    padding: 0.2rem 0;
}

.main-nav__item a:hover,
.main-nav__item a:active {
    color: white;
    border-bottom: 5px solid white;
}

.main-nav__item--cta a,
.mobile-nav__item--cta a {
    color: white;
    background: #ff1b68;
    padding: 0.5rem 1rem;
    border-radius: 8px;
}

.main-nav__item--cta a:hover,
.main-nav__item--cta a:active,
.mobile-nav__item--cta a:hover,
.mobile-nav__item--cta a:active {
    color: #ff1b68;
    background: white;
    border: none;
}

@media (min-width: 40rem) {
    .toggle-button {
        display: none;
    }

    .main-nav {
        display: inline-block;
        text-align: right;
        width: calc(100% - 44px);
        vertical-align: middle;
    }
}

.main-footer {
    background: black;
    padding: 2rem;
    margin-top: 3rem;
}

.main-footer__links {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: center;
}

.main-footer__link {
    display: inline-block;
    margin: 0 1rem;
}

.main-footer__link a {
    color: white;
    /* text-decoration 这个 CSS 属性是用于设置文本的修饰线外观的（下划线、上划线、贯穿线/删除线  或 闪烁）。
       它是 text-decoration-line, text-decoration-color, text-decoration-style, 
       和新出现的 text-decoration-thickness 属性的缩写。 */
    text-decoration: none;
}

.main-footer__link a:hover,
.main-footer__link a:active {
    color: #ccc;
}

.button {
    background: #0e4f1f;
    color: white;
    font: inherit;
    border: 1.5px solid #0e4f1f;
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover,
.button:active {
    background: white;
    color: #0e4f1f;
}

/* CSS伪类 :focus表示获得焦点的元素（如表单输入）。当用户点击或触摸元素或通过键盘的 “tab” 键选择它时会被触发。button被触发后会有蓝框（outline）。 */
.button:focus {
    /* CSS的outline属性是用来设置一个或多个单独的轮廓属性的简写属性，例如 outline-style, outline-width 和 outline-color。
       轮廓与边框在以下几个方面存在不同：
        - 轮廓不占据空间，它们被描绘于内容之上
        - 轮廓可以是非矩形的。在Gecko/Firefox中，轮廓是矩形的，但是Opera则会围绕元素结构绘制非矩形的形状  */
    outline: none;
}

/* %:
   position: fixed , the containing block is the Viewport
   position: absolute , the containing block is the Ancestor(content + padding) (the closest ancestor which is not position static)
   position: atatic/relative , the containing block is the Ancestor(only content) (the closest ancestor whick is the block level element) */

.mobile-nav {
    display: none;
    position: fixed;
    z-index: 101;
    top: 0;
    left: 0;
    background: white;
    width: 80%;
    height: 100vh;
}

.mobile-nav__items {
    width: 90%;
    height: 100%;
    list-style: none;
    margin: 10% auto;
    padding: 0;
    text-align: center;
}

.mobile-nav__item {
    margin: 1rem 0;
}

.mobile-nav__item a {
    font-size: 1.5rem;
}

.button {
    background: #0e4f1f;
    color: white;
    font: inherit;
    border: 1.5px solid #0e4f1f;
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover,
.button:active {
    background: white;
    color: #0e4f1f;
}

.button:focus {
    outline: none;
}

.open {
    display: block !important;
}